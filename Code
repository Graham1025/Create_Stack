//***从这个栈的例子的学习，深刻理解结构体变量名和指向结构体变量的指针的区别，即什么时候该用struct->xxx，什么时候该用struct.xxx；深刻理解形参在如何修改赋值的情况下，
//会改变实参的值，并不是必须要传入指针的指针（这个是链表创建传入空指针的特例）***

/*
2进制到8进制的转换
*/
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

#define N 8  //要转换成的进制
#define INIT_SIZE 5  //栈的初始空间大小
#define INCRE_SIZE 2  //栈空间增量

typedef struct {
	int *base;    //指向栈底，也是栈空间的地址
	int *top;    //始终指向有效元素的上一个位置
	int initsize;    //栈的初始空间大小
}SqStack;

//栈初始化
void Init_Stack(SqStack *S) {
	S->initsize = INIT_SIZE;
	S->base = (int *)malloc(INIT_SIZE*sizeof(int));
	S->top = S->base;
}

//元素m入栈
void Push(SqStack *S, int m) {
	//判断栈是否满，满则增加栈的容量
	if ((S->top - S->base) >= S->initsize)
	{
		S->base = (int *)realloc(S->base, sizeof(int) * S->initsize + INCRE_SIZE);
		S->initsize = S->initsize + INCRE_SIZE;
	}

	*(S->top) = m;
	printf("入栈元素：%d\n", *(S->top));
	S->top++;

	//和上面效果一样，数组地址加法原理
	//S->top = S->top + 1;
}

//遍历栈元素（思考为什么这个地方只能是.而不能是->）
void View_Stack(SqStack S) {
	int i = 0;
	printf("读取栈的元素：");
	while (S.base + i<S.top) {
		printf("%d ", *(S.base + i++));
	}
	printf("\n");
}

//元素出栈
void Pop(SqStack *S, int *val) {
	*val = *--S->top;
	printf("弹出栈顶元素为：%d\n", *val);
}


int main()
{
	//初始化变量
	SqStack S;
	char c;
	int n;

	//初始化栈
	Init_Stack(&S);

	//printf("输入要进栈的元素，以#结束\n");
	//scanf("%c", &c);
	//while (c != '#') {
	//	Push(&S, c);
	//	scanf("%c", &c);
	//}
	//getchar();

	//元素入栈
	printf("元素进栈...\n");
	Push(&S, 1);
	Push(&S, 0);
	Push(&S, 1);
	Push(&S, 1);
	printf("\n");
	View_Stack(S);

	//弹栈
	Pop(&S, &n);
	View_Stack(S);

	printf("\n");
	getchar();
	return 0;
}
